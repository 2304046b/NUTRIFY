@page "/emotionallogs/delete"
@using Microsoft.EntityFrameworkCore
@using NUTRIFY.Components.Domain
@inject IDbContextFactory<NUTRIFY.Data.NUTRIFYContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>EmotionalLog</h2>
    <hr />
    @if (emotionallog is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@emotionallog.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Emotion</dt>
            <dd class="col-sm-10">@emotionallog.Emotion</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Notes</dt>
            <dd class="col-sm-10">@emotionallog.Notes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Context</dt>
            <dd class="col-sm-10">@emotionallog.Context</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Intensity</dt>
            <dd class="col-sm-10">@emotionallog.Intensity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@emotionallog.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@emotionallog.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@emotionallog.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@emotionallog.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="emotionallog" OnValidSubmit="DeleteEmotionalLog" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(emotionallog is null)">Delete</button> |
            <a href="/emotionallogs">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private EmotionalLog? emotionallog;

    [SupplyParameterFromQuery]
    private int EmotionalLogID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        emotionallog = await context.EmotionalLog.FirstOrDefaultAsync(m => m.EmotionalLogID == EmotionalLogID);

        if (emotionallog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmotionalLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.EmotionalLog.Remove(emotionallog!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/emotionallogs");
    }
}
