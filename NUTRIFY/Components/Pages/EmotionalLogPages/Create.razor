@page "/emotionallogs/create"
@using Microsoft.EntityFrameworkCore
@using NUTRIFY.Components.Domain
@inject IDbContextFactory<NUTRIFY.Data.NUTRIFYContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>EmotionalLog</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EmotionalLog" OnValidSubmit="AddEmotionalLog" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label> 
                <InputDate id="date" @bind-Value="EmotionalLog.Date" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.Date" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="emotion" class="form-label">Emotion:</label> 
                <InputText id="emotion" @bind-Value="EmotionalLog.Emotion" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.Emotion" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="notes" class="form-label">Notes:</label> 
                <InputText id="notes" @bind-Value="EmotionalLog.Notes" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.Notes" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="context" class="form-label">Context:</label> 
                <InputText id="context" @bind-Value="EmotionalLog.Context" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.Context" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="intensity" class="form-label">Intensity:</label> 
                <InputNumber id="intensity" @bind-Value="EmotionalLog.Intensity" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.Intensity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="EmotionalLog.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="EmotionalLog.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="EmotionalLog.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="EmotionalLog.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => EmotionalLog.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/emotionallogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private EmotionalLog EmotionalLog { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEmotionalLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.EmotionalLog.Add(EmotionalLog);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/emotionallogs");
    }
}
