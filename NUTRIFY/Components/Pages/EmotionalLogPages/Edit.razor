@page "/emotionallogs/edit"
@using Microsoft.EntityFrameworkCore
@using NUTRIFY.Components.Domain
@inject IDbContextFactory<NUTRIFY.Data.NUTRIFYContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>EmotionalLog</h2>
<hr />
@if (EmotionalLog is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="EmotionalLog" OnValidSubmit="UpdateEmotionalLog" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="EmotionalLog.EmotionalLogID" value="@EmotionalLog.EmotionalLogID" />
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="EmotionalLog.Date" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emotion" class="form-label">Emotion:</label>
                    <InputText id="emotion" @bind-Value="EmotionalLog.Emotion" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.Emotion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes:</label>
                    <InputText id="notes" @bind-Value="EmotionalLog.Notes" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.Notes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="context" class="form-label">Context:</label>
                    <InputText id="context" @bind-Value="EmotionalLog.Context" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.Context" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="intensity" class="form-label">Intensity:</label>
                    <InputNumber id="intensity" @bind-Value="EmotionalLog.Intensity" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.Intensity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="EmotionalLog.DateCreated" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="EmotionalLog.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="EmotionalLog.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="EmotionalLog.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => EmotionalLog.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/emotionallogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int EmotionalLogID { get; set; }

    [SupplyParameterFromForm]
    private EmotionalLog? EmotionalLog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        EmotionalLog ??= await context.EmotionalLog.FirstOrDefaultAsync(m => m.EmotionalLogID == EmotionalLogID);

        if (EmotionalLog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmotionalLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(EmotionalLog!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmotionalLogExists(EmotionalLog!.EmotionalLogID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/emotionallogs");
    }

    private bool EmotionalLogExists(int emotionallogid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.EmotionalLog.Any(e => e.EmotionalLogID == emotionallogid);
    }
}
